pipeline {
    agent any
    environment {
        GITORGNAME          = 'jchupick'
        GITREPONAME         = 'TESTPROJ'
        GITBRANCH           = 'master'
        DISPLAYNAME         = 'TESTPROJ'
        NEXUS_REPONAME      = 'TESTPROJ'
        JIRAPROJECTKEY      = 'TESTPROJ'
        BUILDROOTDIR        = 'BMGF'
        BUILDSLNFILE        = 'BMGF'
        BUILDPROJDIR        = 'BMGFWeb'
        BUILDPROJFILEPREFIX = 'BMGFWeb'
        FULLCSPROJFILENAME  = "$BUILDROOTDIR\\$BUILDPROJDIR\\$BUILDPROJFILEPREFIX" + ".csproj"
        GITHUBFULLURL       = "ssh://git@github.com/" + "$GITORGNAME/$GITREPONAME" + ".git"
        FULLVERSIONSCRIPT   = ".\\$BUILDROOTDIR\\CreateModifiedMSProjectFile.ps1"
        BATCMDOLDVERSION    = "@echo off & powershell $FULLVERSIONSCRIPT -filename $FULLCSPROJFILENAME -getversion"
        BATCMDNEWVERSION    = "@echo off & powershell $FULLVERSIONSCRIPT -filename $FULLCSPROJFILENAME -build increment -getversion"
    }
    stages {
        stage('Github Pull') {
            steps {
                git branch: env.GITBRANCH,
                credentialsId: 'jenkins-credentials',
                url: env.GITHUBFULLURL
               
                script {
                    LOCAL_OLD_VERSION   = bat(returnStdout: true, script: env.BATCMDOLDVERSION).trim()
                    LOCAL_NEW_VERSION   = bat(returnStdout: true, script: env.BATCMDNEWVERSION).trim()
                    // Now make available in future stages
                    env.BUILDVERSIONOLD = LOCAL_OLD_VERSION
                    env.BUILDVERSIONNEW = LOCAL_NEW_VERSION

                    def now = new Date()
                    env.CURRENTDATETIME = now.format("yyyy-MM-dd HH:mm:ss")
                }
               
                withCredentials([usernamePassword(credentialsId: 'jenkinsuser-credentials', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')])
                {
                    bat '''
                    @echo Increment the version inside the csproj file.
                    @echo Copy it to the original, replacing what was there.
                    copy /Y    %FULLCSPROJFILENAME% %FULLCSPROJFILENAME%.Orig
                    powershell .\\%BUILDROOTDIR%\\CreateModifiedMSProjectFile.ps1 -filename %FULLCSPROJFILENAME% -build increment > %FULLCSPROJFILENAME%.JenkinsTemp
                    copy /Y    %FULLCSPROJFILENAME%.JenkinsTemp %FULLCSPROJFILENAME%
                    git add    %FULLCSPROJFILENAME%
                    git commit -m "Jenkins updating version to %BUILDVERSIONNEW% " %FULLCSPROJFILENAME%
                    '''
               
                    bat('git push https://%GIT_USERNAME%:%GIT_PASSWORD%@github.com/%GITORGNAME%/%GITREPONAME%.git')
                }
            }
        }
        stage('JIRA Link') {
            environment {
                JIRA_SITE = 'jiradev'
            }
            steps {
                script {
                    def versionDescription = "Branch: ${env.GITBRANCH} ${CURRENTDATETIME} "
                    def versionfields = [
                                          name: env.BUILDVERSIONNEW,
                                          archived: false,
                                          released: false,
                                          description: versionDescription,
                                          project: env.JIRAPROJECTKEY
                                        ]
                    newJIRAVersionObj = jiraNewVersion version: versionfields
                   
                    env.newVersionId   = newJIRAVersionObj.data.id
                    env.newVersionName = newJIRAVersionObj.data.name

                    echo "JIRA Id: ${env.newVersionId}"
                    echo "JIRA Version: ${env.newVersionName}"
                   
                    def jiramasterset       = getJIRASetFromChangelogSet()
                    def filemasterset       = getFileSetFromChangelogSet()
                    def jirahtmlstring      = createJIRAIssueLinkList(jiramasterset)
                    def filestringraw       = filemasterset.join("\n")
                    def filedetailsstring   = getFileDetailsFromChangelogSet()
                    def commitdetailsstring = getCommitDetailsFromChangelogSet()
                   
                    echo "File Details:   \n" + filedetailsstring
                    echo "Commit Details: \n" + commitdetailsstring

                    associateVerionToIssues(jiramasterset)
                   
                    currentBuild.description  = "<pre>"
                    currentBuild.description += "Branch:  " + env.GITBRANCH       + "\n"
                    currentBuild.description += "Version: " + env.BUILDVERSIONNEW + "\n\n"
                    currentBuild.description += "</pre>\n"
                    currentBuild.description += "JIRA Version Report: <a href=\"https://jira.jchupick.net/projects/${JIRAPROJECTKEY}/versions/${env.newVersionId}\">${env.newVersionName}</a><br />\n"
                    currentBuild.description += "<br />\n"
                    currentBuild.description += "JIRA Issue List: <br /><br />\n" + jirahtmlstring
                    currentBuild.description += "<br />\n"
                    currentBuild.description += "<pre>FileSet:\n\n${filestringraw}</pre>"
                }
            }
        }
        stage('Build') {
            steps {
                bat '''
                @echo BUILDING FROM BRANCH: %GITBRANCH%
                @echo OLD VERSION:          %BUILDVERSIONOLD%
                @echo NEW VERSION:          %BUILDVERSIONNEW%
                set
                '''

                dir(env.BUILDROOTDIR) {
                    bat('dotnet restore')
                    bat('sleep 3')
                    bat('MSBuild.exe %BUILDSLNFILE%.sln /target:Clean /property:Configuration=Release')
                    bat('sleep 3')
                    bat('MSBuild.exe %BUILDSLNFILE%.sln /target:Build /property:Configuration=Release')
                }
            }
        }
        stage('SonarQube') {
            steps {
                script {
                    dir(env.BUILDROOTDIR) {
                        withSonarQubeEnv('SonarQube') {
                            // BMGFWeb.csproj           92071A3F-C7A5-4F7E-869D-416335C56FC0
                            // BMGF.DAL.csproj          FAC85ECB-1267-4525-8D83-8348463D15F0
                            // BMGF.Services.csproj     B297E94C-FA70-44F8-99D9-EC3701905FCF
                            // DomainModels.csproj      69B27677-0F8F-4472-AB5C-C601FF7B36FA
                            // FileOpenWrapper.csproj   F3D0079B-E788-4564-BDD5-0DE9D29976BF
                            //
                            bat '''
                            dotnet tool install --global dotnet-sonarscanner
                            dotnet sonarscanner begin /n:"%DISPLAYNAME%"  /k:"%GITORGNAME%.%DISPLAYNAME%" ^
                                                                          /d:92071A3F-C7A5-4F7E-869D-416335C56FC0.sonar.exclusions="wwwroot/assets/**/*,wwwroot/lib/**/*" ^
                                                                          /v:%BUILDVERSIONNEW%
                            dotnet build %BUILDSLNFILE%.sln
                            dotnet sonarscanner end
                            '''
                        }
                    }
                }
            }
        }
        stage('Veracode') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'jenkinsVeracode', passwordVariable: 'veracode_password', usernameVariable: 'veracode_username')]) {
                    veracode applicationName: "$GITREPONAME",
                    createSandbox: false,
                    sandboxName: '',
                    scanName: "$BUILDVERSIONNEW",
                    criticality: 'High',
                    fileNamePattern: '', replacementPattern: '',
                    scanExcludesPattern: '', scanIncludesPattern: '',
                    teams: '', uploadExcludesPattern: '',  
                    uploadIncludesPattern: 'BMGF/BMGFWeb/bin/Release/netcoreapp2.1/publish/BMGF*.dll,BMGF/BMGFWeb/bin/Release/netcoreapp2.1/publish/DomainModels.dll,BMGF/BMGFWeb/bin/Release/netcoreapp2.1/publish/FileOpenWrapper.dll',
                    vid: '', vkey: '',
                    vpassword: veracode_password, vuser: veracode_username
                }
            }
        }
        stage('Package') {
            steps {
                dir(env.BUILDROOTDIR) {
                    bat('call MsCmdPackage.bat Release')
                }
            }
        }
        stage('Nexus') {
            environment {
                NEXUS_GROUPID         = "net.jchupick.$NEXUS_REPONAME"
                NEXUS_UPLOAD_FILENAME = "$BUILDROOTDIR/$BUILDPROJDIR/$BUILDPROJFILEPREFIX" + ".zip"
            }
            steps {
                bat('set NEXUS')
                nexusArtifactUploader artifacts: [[artifactId: "$GITREPONAME",
                                                        classifier: '',
                                                        file: "$NEXUS_UPLOAD_FILENAME",
                                                        type: 'zip'
                                                    ]],
                                        credentialsId: 'f6522133-c8cc-4e2f-a0cb-74bf10c688b4',
                                        groupId: "$NEXUS_GROUPID",
                                        nexusUrl: 'nexusdev.jchupick.net',
                                        nexusVersion: 'nexus3',
                                        protocol: 'https',
                                        repository: "$NEXUS_REPONAME",
                                        version: "$BUILDVERSIONNEW"
            }
        }
        stage('Env TST') {
            when {
                expression { env.DEPLOY_TO_TST == 'TRUE' }
            }
            environment {
                J_CURRENT_WEBSERVER = 'webutil-tst'
                J_CURRENT_WEBSITE   = 'testproj-tst'
                J_CURRENT_WEBENV    = 'TST'
                J_CURRENT_DEPLOY_DIR = 'c$\\applications'
            }
            steps {
                dir(env.BUILDROOTDIR) {
                    withCredentials([usernamePassword(credentialsId: 'jenkinsuser-credentials', passwordVariable: 'DEPLOY_PASSWORD', usernameVariable: 'DEPLOY_USERNAME')])
                    {
                        bat('iisreset %J_CURRENT_WEBSERVER% /STOP')
                        sleep 3
                        bat('call MsCmdPublish.bat %J_CURRENT_WEBSERVER% %J_CURRENT_WEBENV% %J_CURRENT_WEBSITE% %J_CURRENT_DEPLOY_DIR% /Y %BUILDPROJDIR%\\%BUILDPROJFILEPREFIX%.zip %DEPLOY_USERNAME% %DEPLOY_PASSWORD%')
                        sleep 3
                        bat('iisreset %J_CURRENT_WEBSERVER% /START')
                    }
                }
            }
        }
    }
}

@NonCPS
def getJIRASetFromChangelogSet() {
    def Set jiraset  = []

    def changeLogSets = currentBuild.changeSets
   
    changeLogSets.each { entries ->
        entries.each { entry ->
            def jiramatch = (entry.msg =~ /([a-zA-Z0-9]+-[0-9]+)(.*)/)
            while (jiramatch) {
                jiraset.leftShift(jiramatch.group(1))
               
                def shorter = jiramatch.group(2)
                jiramatch = (shorter =~ /([a-zA-Z0-9]+-[0-9]+)(.*)/)
            }
        }
    }
    return jiraset
}

@NonCPS
def getCommitDetailsFromChangelogSet() {
    def String commitdetsilsreturnstring = ""

    def changeLogSets = currentBuild.changeSets
   
    changeLogSets.each { entries ->
        entries.each { entry ->
            commitdetsilsreturnstring += "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}\n"
        }
    }
    return commitdetsilsreturnstring
}

@NonCPS
def getFileSetFromChangelogSet() {
    def Set fileset = []

    def changeLogSets = currentBuild.changeSets
   
    changeLogSets.each { entries ->
        entries.each { entry ->
            def files = new ArrayList(entry.affectedFiles)
            files.each { file ->
                fileset.leftShift(file.path)
            }
        }
    }
    return fileset
}

@NonCPS
def getFileDetailsFromChangelogSet() {
    def String filedetailsreturnstring = ""

    def changeLogSets = currentBuild.changeSets
   
    changeLogSets.each { entries ->
        entries.each { entry ->
            def files = new ArrayList(entry.affectedFiles)
            files.each { file ->
                filedetailsreturnstring += "${file.editType.name}    ${file.path}\n"
            }
        }
    }
    return filedetailsreturnstring
}

def associateVerionToIssues(Set jiraissuesetparam) {
    jiraissuesetparam.each { jirakey ->
        try {
            def newVersionObj     = jiraGetVersion id: env.newVersionId
            def currentIssue      = jiraGetIssue idOrKey: jirakey
            def fixVersions       = currentIssue.data.fields.fixVersions << newVersionObj.data
            def tempIssue         = [fields: [fixVersions: fixVersions]]
            jiraEditIssue idOrKey: jirakey, issue: tempIssue
        } catch (e) {
            echo "Exception in associateVerionToIssues(): ${e} :: ${jirakey}"
        }
    }
}

def createJIRAIssueLinkList(Set jiraissuesetparam) {
    htmlreturnstring = ""
   
    jiraissuesetparam.each { jirakey ->
        try {
            def currentIssue  = jiraGetIssue idOrKey: jirakey
            htmlreturnstring += "<a href=\"https://jira.jchupick.net/browse/${jirakey}\">${jirakey}</a> - ${currentIssue.data.fields.summary}<br />\n"
        } catch (e) {
            echo "Exception in associateVerionToIssues(): ${e} :: ${jirakey}"
        }
    }
    return htmlreturnstring
}
